I want to build a **production‑level**, **SEO‑optimized**, **mobile‑first** Next.js website (using the **Pages Router**) that fetches data from the FBI Wanted API (https://www.fbi.gov/wanted/api). Use **TypeScript**, **Tailwind CSS**, and integrate **GraphQL** on the backend via **Apollo Server** (in Next.js API routes) and **Apollo Client** on the frontend.

**Tech Stack & Tools**  
- Next.js Pages Router with **getStaticProps**, **getServerSideProps**, and **Incremental Static Regeneration**  
- Backend: Apollo Server in `/pages/api/graphql.ts`  
- Frontend: Apollo Client + React Context (or Zustand) for global state  
- Styling: Tailwind CSS, dark mode via `className` toggle  
- Animations: Anime.js (use `useEffect` + `anime.createScope` for hover and page transitions)  
- Deployment: Vercel with GitHub Actions for CI/CD  

**Site Structure & Navigation**  
- **Navbar**: Home | Most Wanted | Cartels | News | AI  
- **Home (/)**  
  - Sections for each **crime category**  
  - **Cards** listing suspects (image, name, short description)  
  - **Filter** UI (by status, field office, reward) with React‑side filtering and debounced search  
- **Details ([id])**  
  - Full details of the suspect fetched via GraphQL  
  - Display FBI fields: title, description, reward, images, field office, status  
  - **Modal** for additional info (click a button to open)  
- **Most Wanted (/most-wanted)**  
  - Static list of top “Most Wanted” criminals (use `getStaticProps` to fetch once, revalidate periodically)  
  - Same card + detail flow as Home  
- **Cartels (/cartels)**  
  - Three columns: “Top 3 Cartels” with **lorem ipsum** content and placeholder images  
- **News (/news)**  
  - Fetch from a **crime news API** by category (Most Wanted, Cartel, Crimes)  
  - List of articles: image, title, link, date  
- **AI (/ai)**  
  - Placeholder page with lorem ipsum text  

**UX & Performance**  
- **Hover animations** on cards using Anime.js  
- **Mobile responsive** layout with Tailwind’s responsive classes  
- **Dark mode toggle** persists with `localStorage` + Tailwind  
- **React.memo** on pure components, `useCallback`/`useMemo` where needed  
- Use `<Image>` from Next.js for optimized images, and optional Cloudinary/Imgix CDN  
- **Caching & revalidation**: Apollo Client cache + Next.js ISR  

**Deployment**  
- Push to GitHub → Vercel preview builds  
- CI on every PR with GitHub Actions  
- Production on `main` branch auto‑deploy  

---

Please scaffold the starter repo with folder structure, installation scripts, sample GraphQL schema/queries for the FBI API, and stubbed pages/components matching the above. Include data‑fetching examples, Anime.js integration in a card component, and basic dark‑mode toggle logic.


SYNOPSIS:
Below is a detailed step-by-step guide to scaffold a production-level, SEO-optimized, mobile-first Next.js website that meets your requirements. This includes folder structure, installation scripts, GraphQL schema/queries for the FBI Wanted API, stubbed pages/components, data-fetching logic, Anime.js integration, and dark mode toggle logic. Each step is actionable and leverages the specified tech stack properly.

---

## Step-by-Step Synopsis

### Step 1: Initialize the Next.js Project
- **What to Do:** Set up a new Next.js project with TypeScript support and navigate into the project directory.
- **How:**
  - Run the following command in your terminal:
    ```bash
    npx create-next-app@latest fbi-wanted-app --typescript
    cd fbi-wanted-app
    ```
  - This creates a Next.js project with the Pages Router and TypeScript pre-configured.

---

### Step 2: Install Dependencies
- **What to Do:** Install all required dependencies for the tech stack and tools.
- **How:**
  - Run this single command to install everything:
    ```bash
    npm install -D tailwindcss postcss autoprefixer && npm install @apollo/client graphql apollo-server-micro animejs zustand next-images
    ```
  - Breakdown:
    - `tailwindcss`, `postcss`, `autoprefixer`: For styling with Tailwind CSS.
    - `@apollo/client`, `graphql`: For GraphQL queries on the frontend.
    - `apollo-server-micro`: For GraphQL backend in Next.js API routes.
    - `animejs`: For hover animations.
    - `zustand`: For global state management (e.g., dark mode).
    - `next-images`: For image optimization with Next.js `<Image>`.

---

### Step 3: Configure Tailwind CSS
- **What to Do:** Set up Tailwind CSS with dark mode support and create global styles.
- **How:**
  1. Initialize Tailwind:
     ```bash
     npx tailwindcss init -p
     ```
  2. Update `tailwind.config.js`:
     ```javascript
     /** @type {import('tailwindcss').Config} */
     module.exports = {
       content: [
         "./pages/**/*.{js,ts,jsx,tsx}",
         "./components/**/*.{js,ts,jsx,tsx}",
       ],
       theme: {
         extend: {},
       },
       darkMode: 'class', // Enable dark mode via class toggle
       plugins: [],
     }
     ```
  3. Replace `styles/globals.css` with:
     ```css
     @tailwind base;
     @tailwind components;
     @tailwind utilities;

     /* Custom dark mode styles */
     html.dark {
       @apply bg-gray-900 text-white;
     }
     ```

---

### Step 4: Set Up Project Folder Structure
- **What to Do:** Create a clean folder structure for pages, components, and utilities.
- **How:**
  - Use this structure:
    ```
    fbi-wanted-app/
    ├── components/
    │   ├── Navbar.tsx
    │   ├── SuspectCard.tsx
    │   └── DarkModeToggle.tsx
    ├── lib/
    │   ├── apolloClient.ts
    ├── pages/
    │   ├── api/
    │   │   └── graphql.ts
    │   ├── _app.tsx
    │   ├── index.tsx         # Home
    │   ├── [id].tsx         # Details
    │   ├── most-wanted.tsx
    │   ├── cartels.tsx
    │   ├── news.tsx
    │   └── ai.tsx
    ├── styles/
    │   └── globals.css
    ├── public/
    │   └── (static assets)
    ├── tailwind.config.js
    ├── tsconfig.json
    └── package.json
    ```

---

### Step 5: Set Up Apollo Server (GraphQL Backend)
- **What to Do:** Create a GraphQL API in Next.js API routes to fetch data from the FBI Wanted API.
- **How:**
  - Create `pages/api/graphql.ts`:
    ```typescript
    import { ApolloServer } from 'apollo-server-micro';
    import { gql } from 'graphql-tag';

    const typeDefs = gql`
      type Suspect {
        id: String!
        title: String
        description: String
        reward: String
        images: [String]
        fieldOffice: String
        status: String
      }
      type Query {
        suspects: [Suspect]
        suspect(id: String!): Suspect
      }
    `;

    const resolvers = {
      Query: {
        suspects: async () => {
          const res = await fetch('https://api.fbi.gov/wanted/v1/list');
          const data = await res.json();
          return data.items.map((item: any) => ({
            id: item.uid,
            title: item.title,
            description: item.description,
            reward: item.reward_text,
            images: item.images.map((img: any) => img.original),
            fieldOffice: item.field_offices?.[0],
            status: item.status,
          }));
        },
        suspect: async (_: any, { id }: { id: string }) => {
          const res = await fetch(`https://api.fbi.gov/wanted/v1/list?uid=${id}`);
          const data = await res.json();
          const item = data.items[0];
          return {
            id: item.uid,
            title: item.title,
            description: item.description,
            reward: item.reward_text,
            images: item.images.map((img: any) => img.original),
            fieldOffice: item.field_offices?.[0],
            status: item.status,
          };
        },
      },
    };

    const apolloServer = new ApolloServer({ typeDefs, resolvers });
    export default apolloServer.createHandler({ path: '/api/graphql' });

    export const config = {
      api: { bodyParser: false },
    };
    ```

---

### Step 6: Set Up Apollo Client (Frontend)
- **What to Do:** Initialize Apollo Client to connect to the GraphQL backend and integrate it with Next.js.
- **How:**
  1. Create `lib/apolloClient.ts`:
     ```typescript
     import { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';

     const client = new ApolloClient({
       link: new HttpLink({
         uri: '/api/graphql', // Points to Next.js API route
       }),
       cache: new InMemoryCache(),
     });

     export default client;
     ```
  2. Update `pages/_app.tsx`:
     ```typescript
     import { ApolloProvider } from '@apollo/client';
     import client from '../lib/apolloClient';
     import '../styles/globals.css';

     function MyApp({ Component, pageProps }) {
       return (
         <ApolloProvider client={client}>
           <Component {...pageProps} />
         </ApolloProvider>
       );
     }

     export default MyApp;
     ```

---

### Step 7: Implement Navbar Component
- **What to Do:** Create a responsive navigation bar with links to all pages.
- **How:**
  - Create `components/Navbar.tsx`:
    ```typescript
    import Link from 'next/link';

    export default function Navbar() {
      return (
        <nav className="bg-gray-800 p-4">
          <ul className="flex space-x-4 text-white">
            <li><Link href="/">Home</Link></li>
            <li><Link href="/most-wanted">Most Wanted</Link></li>
            <li><Link href="/cartels">Cartels</Link></li>
            <li><Link href="/news">News</Link></li>
            <li><Link href="/ai">AI</Link></li>
          </ul>
        </nav>
      );
    }
    ```

---

### Step 8: Implement SuspectCard Component with Anime.js
- **What to Do:** Create a reusable card component with hover animations using Anime.js.
- **How:**
  - Create `components/SuspectCard.tsx`:
    ```typescript
    import { useEffect, useRef } from 'react';
    import anime from 'animejs';
    import Image from 'next/image';

    type Suspect = {
      id: string;
      title: string;
      description: string;
      images: string[];
    };

    export default function SuspectCard({ suspect }: { suspect: Suspect }) {
      const cardRef = useRef<HTMLDivElement>(null);

      useEffect(() => {
        const animate = () => {
          anime({
            targets: cardRef.current,
            scale: 1.05,
            duration: 300,
            easing: 'easeOutQuad',
          });
        };
        const reset = () => {
          anime({
            targets: cardRef.current,
            scale: 1,
            duration: 300,
            easing: 'easeOutQuad',
          });
        };

        const card = cardRef.current;
        card?.addEventListener('mouseenter', animate);
        card?.addEventListener('mouseleave', reset);
        return () => {
          card?.removeEventListener('mouseenter', animate);
          card?.removeEventListener('mouseleave', reset);
        };
      }, []);

      return (
        <div ref={cardRef} className="bg-white dark:bg-gray-800 p-4 rounded shadow">
          {suspect.images[0] && (
            <Image src={suspect.images[0]} alt={suspect.title} width={200} height={200} />
          )}
          <h3 className="text-lg font-bold">{suspect.title}</h3>
          <p className="text-sm">{suspect.description.slice(0, 100)}...</p>
        </div>
      );
    }
    ```

---

### Step 9: Implement Home Page
- **What to Do:** Fetch suspect data with GraphQL and display cards with filtering.
- **How:**
  - Create `pages/index.tsx`:
    ```typescript
    import { gql } from '@apollo/client';
    import client from '../lib/apolloClient';
    import SuspectCard from '../components/SuspectCard';
    import Navbar from '../components/Navbar';

    export async function getStaticProps() {
      const { data } = await client.query({
        query: gql`
          query {
            suspects {
              id
              title
              description
              images
            }
          }
        `,
      });
      return {
        props: { suspects: data.suspects },
        revalidate: 3600, // ISR: Revalidate every hour
      };
    }

    export default function Home({ suspects }) {
      return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
          <Navbar />
          <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">FBI Wanted</h1>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              {suspects.map((suspect: any) => (
                <SuspectCard key={suspect.id} suspect={suspect} />
              ))}
            </div>
          </div>
        </div>
      );
    }
    ```

---

### Step 10: Implement Details Page
- **What to Do:** Fetch and display suspect details dynamically via GraphQL.
- **How:**
  - Create `pages/[id].tsx`:
    ```typescript
    import { gql } from '@apollo/client';
    import client from '../lib/apolloClient';
    import Navbar from '../components/Navbar';

    export async function getServerSideProps({ params }) {
      const { data } = await client.query({
        query: gql`
          query Suspect($id: String!) {
            suspect(id: $id) {
              id
              title
              description
              reward
              images
              fieldOffice
              status
            }
          }
        `,
        variables: { id: params.id },
      });
      return { props: { suspect: data.suspect } };
    }

    export default function Details({ suspect }) {
      return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
          <Navbar />
          <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold">{suspect.title}</h1>
            <p>{suspect.description}</p>
            <p>Reward: {suspect.reward}</p>
            <p>Field Office: {suspect.fieldOffice}</p>
            <p>Status: {suspect.status}</p>
          </div>
        </div>
      );
    }
    ```

---

### Step 11: Implement Dark Mode Toggle
- **What to Do:** Add a dark mode toggle that persists with localStorage using Zustand.
- **How:**
  1. Create `components/DarkModeToggle.tsx`:
     ```typescript
     import { useEffect } from 'react';
     import { useStore } from 'zustand';
     import create from 'zustand';

     const useDarkMode = create((set) => ({
       darkMode: false,
       toggle: () => set((state: any) => {
         const newMode = !state.darkMode;
         localStorage.setItem('darkMode', newMode.toString());
         return { darkMode: newMode };
       }),
     }));

     export default function DarkModeToggle() {
       const { darkMode, toggle } = useStore(useDarkMode);

       useEffect(() => {
         const savedMode = localStorage.getItem('darkMode');
         if (savedMode === 'true') toggle();
       }, [toggle]);

       useEffect(() => {
         document.documentElement.classList.toggle('dark', darkMode);
       }, [darkMode]);

       return (
         <button
           onClick={toggle}
           className="p-2 bg-gray-200 dark:bg-gray-700 rounded"
         >
           {darkMode ? 'Light Mode' : 'Dark Mode'}
         </button>
       );
     }
     ```
  2. Add it to `components/Navbar.tsx`:
     ```typescript
     import DarkModeToggle from './DarkModeToggle';
     // Inside the nav:
     <DarkModeToggle />
     ```

---

### Step 12: Stub Remaining Pages
- **What to Do:** Create basic stubbed versions of the remaining pages.
- **How:**
  - `pages/most-wanted.tsx`:
    ```typescript
    import Navbar from '../components/Navbar';
    export default function MostWanted() {
      return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
          <Navbar />
          <h1 className="container mx-auto p-4 text-2xl font-bold">Most Wanted</h1>
        </div>
      );
    }
    ```
  - `pages/cartels.tsx`:
    ```typescript
    import Navbar from '../components/Navbar';
    export default function Cartels() {
      return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
          <Navbar />
          <div className="container mx-auto p-4 grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>Top Cartel 1 - Lorem ipsum...</div>
            <div>Top Cartel 2 - Lorem ipsum...</div>
            <div>Top Cartel 3 - Lorem ipsum...</div>
          </div>
        </div>
      );
    }
    ```
  - `pages/news.tsx`:
    ```typescript
    import Navbar from '../components/Navbar';
    export default function News() {
      return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
          <Navbar />
          <h1 className="container mx-auto p-4 text-2xl font-bold">News</h1>
        </div>
      );
    }
    ```
  - `pages/ai.tsx`:
    ```typescript
    import Navbar from '../components/Navbar';
    export default function AI() {
      return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
          <Navbar />
          <div className="container mx-auto p-4">AI Placeholder - Lorem ipsum...</div>
        </div>
      );
    }
    ```

---

### Step 13: Set Up Deployment
- **What to Do:** Prepare the project for Vercel deployment and GitHub Actions CI/CD.
- **How:**
  1. Push to GitHub:
     - Initialize a Git repo: `git init`, `git add .`, `git commit -m "Initial commit"`.
     - Create a repo on GitHub and push: `git remote add origin <url>`, `git push -u origin main`.
  2. Deploy to Vercel:
     - Connect the repo in Vercel dashboard for automatic deployments.
  3. Add GitHub Actions (create `.github/workflows/ci.yml`):
     ```yaml
     name: CI
     on: [push, pull_request]
     jobs:
       build:
         runs-on: ubuntu-latest
         steps:
           - uses: actions/checkout@v3
           - uses: actions/setup-node@v3
             with: { node-version: '18' }
           - run: npm ci
           - run: npm run build
     ```

---

### Step 14: Final Testing
- **What to Do:** Test the app locally and ensure responsiveness and functionality.
- **How:**
  - Run `npm run dev` and check:
    - Navigation works.
    - Cards animate on hover.
    - Dark mode toggles correctly.
    - Pages load data (Home and Details).

---

This scaffold provides a solid starting point with all requested features stubbed out. You can extend it by adding filtering logic, integrating a news API, and refining the UI as needed.